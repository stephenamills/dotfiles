#!/usr/bin/env bash
# Automatic generated, DON'T MODIFY IT.

# @flag -h --help                            Print help and exit
# @flag --detailed-help                      Print help, including all details and hidden options, and exit
# @flag -V --version                         Print version and exit
# @option -i --input <FILENAME>              Input file (default=stdin)
# @option -o --output <FILENAME>             Output file (default=stdout, when the third invocation form is used).
# @option -s --src-lang[`_choice_src_lang`] <STRING>  source language (use --lang-list to get the complete list).
# @flag --lang-list                          list all the supported language and associated language definition file
# @flag --outlang-list                       list all the supported output language and associated language definition file
# @option -f --out-format[`_choice_out_format`] <STRING>  output format (use --outlang-list to get the complete list)  (default=`html')
# @flag -d --doc                             create an output file that can be used as a stand alone document (e.g., not to be included in another one)
# @flag --no-doc                             cancel the --doc option even if it is implied (e.g., when css is given)
# @option -c --css <FILENAME>                the external style sheet filename.
# @option -T --title <STRING>                give a title to the output document.
# @option -t --tab <INT>                     specify tab length.
# @option -H --header <FILENAME>             file to insert as header
# @option -F --footer <FILENAME>             file to insert as footer
# @option --style-file <FILENAME>            specify the file containing format options (default=`default.style')
# @option --style-css-file <FILENAME>        specify the file containing format options (in css syntax)
# @option --style-defaults <FILENAME>        specify the file containing defaults for format options  (default=`style.defaults')
# @option --outlang-def <FILENAME>           output language definition file
# @option --outlang-map <FILENAME>           output language map file (default=`outlang.map')
# @option --data-dir <PATH>                  directory where language definition files and language maps are searched for.
# @option --output-dir <PATH>                output directory
# @option --lang-def <FILENAME>              language definition file
# @option --lang-map <FILENAME>              language map file  (default=`lang.map')
# @option --show-lang-elements <FILENAME>    prints the language elements that are defined
# @flag --infer-lang                         force to infer source script language (overriding given language specification)
# @option -n --line-number <PADDING>         number all output lines, using the specified padding character  (default=`0')
# @option --line-number-ref <PREFIX>         number all output lines and generate an anchor,
# @option --line-range <STRING>              generate only the lines in the specified range(s)
# @option --range-separator <STRING>         the optional separator to be printed among ranges (e.g., "...")
# @option --range-context <INT>              number of (context) lines generated even if not in range
# @option --regex-range <STRING>             generate only the lines within the specified regular expressions
# @option --gen-references <STRING>          generate references  (possible values="inline", "postline", "postdoc" default=`inline')
# @option --ctags-file <FILENAME>            specify the file generated by ctags that will be used to generate references (default=`tags')
# @option --ctags <CMD>                      how to run the ctags command.
# @flag -v --verbose                         verbose mode on
# @flag -q --quiet                           print no progress information
# @flag --binary-output                      write output files in binary mode
# @flag --statistics                         print some statistics (i.e., elapsed time)
# @flag --gen-version                        put source-highlight version in the generated file  (default=on)
# @option --check-lang <FILENAME>            only check the correctness of a language definition file
# @option --check-outlang <FILENAME>         only check the correctness of an output language definition file
# @flag --failsafe                           if no language definition is found for the input, it is simply copied to the output
# @option -g --debug-langdef <TYPE>          debug a language definition.
# @option --show-regex <FILENAME>            show the regular expression automaton corresponding to a language definition file
# @arg input_file!
# @arg output_file

_choice_src_lang() {
    source-highlight --lang-list | sed -n 's/ = /\t/p'
}

_choice_out_format() {
    source-highlight --outlang-list | sed -n 's/ = /\t/p'
}

command eval "$(argc --argc-eval "$0" "$@")"